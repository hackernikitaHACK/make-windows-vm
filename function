#!/bin/bash

# ====================================================================
# Add_extra_script
# ====================================================================
add_extra_script() {
	local ansf_dir=$1
	local script=$2

	cp $script $ansf_dir/$(basename $script).in
	echo "powershell -executionpolicy bypass -file @ANSF_DRIVE_LETTER@\\$(basename $script)" >$ansf_dir/setupscript5.cmd.in
	echo "@ANSF_DRIVE_LETTER@\\nextscript.cmd 6" >> $ansf_dir/setupscript5.cmd.in
}

# ====================================================================
# Generate a random mac address with 54:52:00: prefix
# ====================================================================
gen_virt_mac() {
    echo 54:52:00:${1:-00}$(od -txC -An -N2 /dev/random | tr \  :)
}

# ====================================================================
# Default: 192.168.122.100, 
# but if it's used, just plus 1
# (i.e. 192.168.122.101 etc.)
# ====================================================================
gen_ip() {
	local ip=100
	if [ -e /tmp/last_ip ]; then
		ip=$(cat /tmp/last_ip)
		let "ip++"
	fi
	echo $ip > /tmp/last_ip
	echo 192.168.122.$ip
}

# ====================================================================
# Eject CDs
# ====================================================================
eject_cds() {
	local vm_name=$1; shift
	local media_list="$@"

	for media in $media_list; do
		vm_media=$(virsh domblklist "$vm_name" | grep "$ansf_media" | awk '{print $1}')
		virsh change-media "$vm_name" "$vm_media" --eject
	done
}

# ====================================================================
# When installation is done, test AD connection and get AD CA cert
# ====================================================================
get_cert() {
        local ldapreqcert=never
        local lmhn=${FQDN%%.*}
	local lmdn=${DOMAIN%%.*}
        local ca_name="$lmdn-$lmhn-ca"
        local ad_suffix="dc=${DOMAIN//./,dc=}"
        local ca_cert_dn="cn=$ca_name,cn=certification authorities,cn=public key services,cn=services,cn=configuration,$ad_suffix"
	local tmp_cacert=/tmp/cacert.$(date +%Y%m%d%H%M%S).$$.pem
        local win_ca_cert_file=/var/www/html/$VM_NAME.crt
        local admin_dn="cn=$ADMINNAME,cn=users,$ad_suffix"
	local ldapurl=

        if [ -z "$BRIDGE" ]; then
                ldapurl="ldap://$VM_IP"
        else
                ldapurl="ldap://$VM_EXT_IP"
        fi

        echo "-----BEGIN CERTIFICATE-----" > $tmp_cacert
	ldapsearch -xLLL -H $ldapurl -D "$admin_dn" -w "$ADMINPASSWORD" -s base \
			-b "$ca_cert_dn" "objectclass=*" cACertificate | perl -p0e 's/\n //g' | \
			sed -e '/^cACertificate/ { s/^cACertificate:: //; s/\(.\{1,64\}\)/\1\n/g; p }' -e 'd' | \
			grep -v '^$' >> $tmp_cacert
	echo "-----END CERTIFICATE-----" >> $tmp_cacert
	echo Now test our CA cert
	if LDAPTLS_REQCERT=$ldapreqcert LDAPTLS_CACERT=$tmp_cacert ldapsearch -xLLL -ZZ -H $ldapurl \
		-D "$admin_dn" -w "$ADMINPASSWORD" -s base -b "" \
                "objectclass=*" currenttime > /dev/null 2>&1; then
                echo Success - the CA cert in $tmp_cacert is working
        else
                echo Error: the CA cert in $tmp_cacert is not working
                LDAPTLS_REQCERT=$ldapreqcert LDAPTLS_CACERT=$tmp_cacert ldapsearch -d 1 -xLLL -ZZ -H $ldapurl -s base \
                -b "" "objectclass=*" currenttime
        fi  
        cp -p $tmp_cacert $win_ca_cert_file
        rm -f $tmp_cacert
}

